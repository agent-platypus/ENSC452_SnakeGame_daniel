#include "digits.h"
#include "xil_printf.h"
#include "cstdio"
extern int* image_buffer_pointer;


const uint8_t font20x20[10][20][20] = {
	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 4
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 5
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 6
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 7
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 8
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 9
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 10
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 11
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 12
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 13
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 14
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 0
	{0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 1
	{0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 2
	{1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 3
	{1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 4
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 5
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 6
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 7
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 8
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 9
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 10
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 11
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 12
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 13
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 14
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 15
	{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 4
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 5
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 6
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 12
	{1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 13
	{1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 14
	{1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 4
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 5
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 6
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 12
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 13
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 14
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 0
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 1
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 2
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 3
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 4
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 5
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 6
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 12
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 13
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 14
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 15
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 16
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 17
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 18
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 4
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 5
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 6
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 12
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 13
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 14
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 4
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 5
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 6
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 12
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 13
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 14
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 4
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 5
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 6
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 7
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 10
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 11
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 12
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 13
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 14
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 15
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 16
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 17
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 18
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 4
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 5
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 6
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 12
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 13
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 14
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

	{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 0
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 1
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 2
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 3
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 4
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 5
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 6
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},  // row 7
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 8
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 9
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 10
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 11
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 12
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 13
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 14
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},  // row 15
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 16
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 17
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 18
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},  // row 19
	},

};

void draw_pixel(int x, int y, int colour) {
	if (x >= 0 && x < 1280 && y >= 0 && y < 1024) {
		image_buffer_pointer[y * 1280 + x] = colour;
	}
}
// Checks the array for the "shape" of the digit, and then will colour in the
// pixels which are 'on' with 1s
void draw_digit_20x20(int digit, int x, int y, int colour) {
	for (int row = 0; row < 20; row++) {
		for (int col = 0; col < 20; col++) {
			if (font20x20[digit][row][col]) {
				draw_pixel(x + col, y + row, colour);
			}
		}
	}
}

// Parses out the score into it's respective digits
void draw_score_20x20(int scoreVal, int x, int y, int colour) {
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%d", scoreVal);
	int digitWidth = 20;
	int spacing    = 2;
	int offset     = 0;

	for (int i = 0; buffer[i] != '\0'; i++) {
		int d = buffer[i] - '0';
		draw_digit_20x20(d, x + offset, y, colour);
		offset += digitWidth + spacing;
	}
}

// Rather than making new 100x100 arrays, I just wrote this to scale the existing ones
// Works the same as the 20x20 functions
void draw_digit_60x60(int digit, int x, int y, int colour) {
    int scale = 2; // Scale factor: 20x20 -> 100x100
    for (int row = 0; row < 20; row++) {
        for (int col = 0; col < 20; col++) {
            if (font20x20[digit][row][col]) {
                // Draw a 5x5 block for each "on" pixel in the 20x20 font
                for (int i = 0; i < scale; i++) {
                    for (int j = 0; j < scale; j++) {
                        draw_pixel(x + col * scale + j, y + row * scale + i, colour);
                    }
                }
            }
        }
    }
}


void draw_score_60x60(int scoreVal, int x, int y, int colour) {
    char buffer[16];
    int digitWidth = 40;
    int spacing    = 5;  // Adjust spacing as needed
    int offset     = 0;
    snprintf(buffer, sizeof(buffer), "%d", scoreVal);

    for (int i = 0; buffer[i] != '\0'; i++) {
        int d = buffer[i] - '0';
        draw_digit_60x60(d, x + offset, y, colour);
        offset += digitWidth + spacing;
    }
}

void draw_volume(int vol) {
	draw_score_60x60(vol, 609, 309, 0x0000FF);
}

void draw_score(int score) {
	draw_score_60x60(score, 800, 60, 0x00FFFF);
}

void clear_score(int score) {
	draw_score_60x60(score, 800, 60, 0xFF00FF);
}

void clear_volume(int vol) {
	draw_score_60x60(vol, 609, 309, 0xFFFFFF);
}
// used to "erase" things, such as if a scores is being continuously updated and you need to erase it each time
//void restore_rect_from_background(int dst_x, int dst_y, int w, int h) {
//	for (int row = 0; row < h; row++) {
//		memcpy(
//			image_buffer_pointer + (dst_y + row) * FRAME_WIDTH + dst_x,
//			background_pointer   + (dst_y + row) * FRAME_WIDTH + dst_x,
//			w * 4
//		);
//	}
//}
